"""chats table remaking

Revision ID: 48b7c8a6b60c
Revises: 56a0b5dbe29e
Create Date: 2024-05-02 12:36:01.488790

"""
from typing import Sequence, Union
from sqlalchemy.ext.declarative import declarative_base
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
from sqlalchemy import select
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy import String, DateTime, Text, ForeignKey
from typing import List
import datetime
from sqlalchemy.dialects.postgresql import ARRAY
from db.models.chat import ChatTypes
#from db.models.user import User
#from db.models.message import Message
#from db.models.assotiations import chat_users_association_table
Base = declarative_base()



chat_users_association_table = sa.Table(
    "chat_users_association_table",
    Base.metadata,
    sa.Column("user_id", sa.ForeignKey("users.id"), primary_key=True),
    sa.Column("chat_id", sa.ForeignKey("chats.id"), primary_key=True),
)

class Message(Base):
    __tablename__ = 'messages'
    id: Mapped[int] = mapped_column(primary_key=True)
    text: Mapped[str] = mapped_column(Text, nullable=True)
    photos: Mapped[List[str]] = mapped_column(ARRAY(String), server_default='{}', nullable=True)  # <= 10
    videos: Mapped[List[str]] = mapped_column(ARRAY(String), server_default='{}', nullable=True)  # <= 10
    user: Mapped["User"] = relationship(back_populates='messages')
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    date: Mapped[datetime.datetime] = mapped_column(DateTime, default=datetime.datetime.utcnow)
    last_time_edited: Mapped[datetime.datetime] = mapped_column(DateTime, nullable=True)
    chat: Mapped["Chat"] = relationship(back_populates='messages')
    chat_id: Mapped[int] = mapped_column(ForeignKey("chats.id"))
    reply_on: Mapped["Message"] = relationship(back_populates='replied_messages', remote_side=id)
    reply_on_id: Mapped[int] = mapped_column(ForeignKey("messages.id", ondelete="SET NULL"), nullable=True)
    replied_messages: Mapped[List["Message"]] = relationship()



class User(Base):
    __tablename__ = 'users'
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(nullable=True)
    surname: Mapped[str] = mapped_column(nullable=True)
    username: Mapped[str] = mapped_column(unique=True, nullable=True)
    avatar: Mapped[str] = mapped_column(nullable=True)
    description: Mapped[str] = mapped_column(nullable=True)
    email: Mapped[str] = mapped_column()
    chats: Mapped[List["Chat"]] = relationship(back_populates='users', secondary=chat_users_association_table)
    messages: Mapped[List[Message]] = relationship(back_populates='user')
    last_time_online: Mapped[datetime.datetime] = mapped_column(DateTime, default=datetime.datetime.utcnow)

class Chat(Base):
    __tablename__ = 'chats'
    id: Mapped[int] = mapped_column(primary_key=True)
    type: Mapped[ChatTypes] = mapped_column(String(50), nullable=False)
    date_of_creation: Mapped[datetime.datetime] = mapped_column(DateTime, default=datetime.datetime.utcnow)
    users: Mapped[List[User]] = relationship(back_populates='chats', secondary=chat_users_association_table)
    class_type: Mapped[str]
    messages: Mapped[List[Message]] = relationship(back_populates='chat')


# revision identifiers, used by Alembic.
revision: str = '48b7c8a6b60c'
down_revision: Union[str, None] = '56a0b5dbe29e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    bind = op.get_bind()
    # Base.prepare(autoload_with=bind)
    # Chat = Base.classes.chats
    session = Session(bind=bind)
    op.add_column('chats', sa.Column('class_type', sa.String(), nullable=True))
    chats = session.execute(select(Chat)).scalars().all()
    for chat in chats:
        if chat.type == ChatTypes.DIRECT.value:
            chat.class_type = 'direct_chats'
        elif chat.type == ChatTypes.GROUP.value:
            chat.class_type = 'group_chats'

    session.commit()
    op.alter_column('chats', 'class_type', nullable=False)



    #raise Exception


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_column('chats', 'class_type')
    # ### end Alembic commands ###
